import React, { useState, useEffect } from 'react';
import { User, ApiResponse } from '../../type';
import { Link } from 'react-router-dom';
import Network from '../shared/Network';
import SearchTerm from '../shared/SearchTerm';
import Button from '../shared/component/Button';
import EditUserPopup from './EditUserPopup';
import 'reactjs-popup/dist/index.css';
const UserManagement: React.FC = () => {
  const API = new Network();
  const [isPopupOpen, setPopupOpen] = useState(false);

  const [users, setUsers] = useState<User[]>([]);
  const [user, setUser] = useState<User[]>([]);
  const [search, setSearch] = useState('');

  const fetchUsers = async () => {
    const fetchedUsers = await API.getAllUsers();

    if (Array.isArray(fetchedUsers.data)) {
      setUsers(fetchedUsers.data as User[]);
    } else {
      // Handle the case when fetchedUsers.data is not an array of User objects
      console.error('API did not return an array of User objects.');
    }
  };

  useEffect(() => {
    fetchUsers();

    console.log('users: multi render', users);
  }, []);

  const handleDelete = async (id: string) => {
    try {
      await API.deleteUser(id, {});
      setUsers(users.filter((user) => user.id !== id));
      console.log('User deleted:');
    } catch (error) {
      console.error('Error deleting user:', error);
    }
  };

  const handleEditUser = (userId: string) => {
    const userToEdit = users.find((user) => user.id === userId);
    //@ts-ignore
    setUser(userToEdit);
    setPopupOpen(!isPopupOpen);
  };
  const handleClosePopup = () => {
    // renitialiser la liste des utilisateurs
    fetchUsers();
    //@ts-ignore
    setPopupOpen(false);
  };

  return (
    <div className="bg-gray-100 h-screen pt-5 m-5">
      <div className="flex justify-between items-center mb-4">
        <div className="flex items-center">
          <SearchTerm
            searchTermValue={search}
            setSearchTerm={(e: {
              target: { value: React.SetStateAction<string> };
            }) => setSearch(e.target.value)}
          />{' '}
        </div>
        <Link
          to="/userCreationPage"
          className="bg-blue-500 text-white px-4 py-2 rounded">
          add user
        </Link>
      </div>
      <table className="min-w-max w-full table-auto bg-white rounded-lg shadow-md text-center">
        <thead className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
          <tr>
            <th>Nom</th>
            <th>Email</th>
            <th>Groupe</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {users
            .filter(
              (user) =>
                user.name.toLowerCase().includes(search.toLowerCase()) ||
                user.email.toLowerCase().includes(search.toLowerCase())
            )
            .map((user) => (
              <tr key={user.id}>
                <td>{user.name}</td>
                <td>{user.email}</td>
                <td>{user.group?.name}</td>
                <td>
                  <Button
                    type="button"
                    onClick={() => handleEditUser(user.id)}
                    className="bg-blue-500 text-white "
                    text=""
                    icons="edit"
                  />

                  <Button
                    type="button"
                    onClick={() => handleDelete(user.id)}
                    className="bg-red-500 text-white"
                    text=""
                    icons="delete"
                  />
                </td>
              </tr>
            ))}
        </tbody>
      </table>
      {isPopupOpen && (
        <EditUserPopup
          isOpen={isPopupOpen}
          userToEdit={user}
          onClose={() => handleClosePopup()}
        />
      )}
    </div>
  );
};

export default UserManagement;
