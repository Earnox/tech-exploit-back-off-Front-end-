import React, { useState, useEffect } from 'react';
import Network from '../shared/Network';
import { User, EditUserPopupProps, Group } from '../../type';
import { editableInputTypes } from '@testing-library/user-event/dist/utils';
import { ApiResponse, ApiData } from '../../type';
import { group } from 'console';

const EditUserPopup = (userToEdit: EditUserPopupProps) => {
  const userData = userToEdit.userToEdit;
  const [groupList, setGroupList] = useState<Group[]>([]);
  const [selectedGroup, setSelectedGroup] = useState<any>(null);
  const [userName, setUserName] = useState<any>(null); // TODO: Replace 'any' with a more specific type when known
  const API = new Network();

  // TODO: Make sure the initial value of the input is not 'null'. Use an empty string '' or 'undefined'.

  const onSubmit = async (event: React.FormEvent) => {
    console.log('Submit');
    if (!event) {
      return;
    }
    event.preventDefault();

    if (!selectedGroup || !userData.id) {
      console.log('Invalid data'); // Vous pouvez aussi afficher un message à l'utilisateur
      return;
    }

    const data = { groupId: selectedGroup, id: userData.id };
    console.log('data', data);

    try {
      const response = await API.updateUserGroup(userData.id, selectedGroup);
      // Vérifiez la réponse et affichez un message de succès si nécessaire
      userToEdit.onClose();
    } catch (error) {
      console.log('Failed to update user group', error); // Vous pouvez aussi afficher un message d'erreur à l'utilisateur
    }
  };

  async function getGroups() {
    try {
      const response: ApiResponse = await API.get(`/groups`); // Using ApiResponse type
      const datafilter = response.data as ApiData; // Type casting to ApiData
      if (!datafilter || !datafilter.groups) {
        // Check for 'groups' in datafilter
        return;
      }
      const filteredGroups = datafilter.groups.filter(
        // Using 'groups' from datafilter
        (group: Group) => group.name !== userData.group.name
      );
      setGroupList(filteredGroups);
      return filteredGroups;
    } catch (e) {
      console.log(e);
    }
  }
  useEffect(() => {
    getGroups();
    setUserName(userData.name);
  }, []);
  return (
    <div className="fixed z-10 inset-0 overflow-y-auto">
      <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div className="fixed inset-0 transition-opacity" aria-hidden="true">
          <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
        </div>
        <span
          className="hidden sm:inline-block sm:align-middle sm:h-screen"
          aria-hidden="true">
          &#8203;
        </span>
        <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
          <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            <div className="sm:flex sm:items-start">
              <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                <h3 className="text-lg leading-6 font-medium text-gray-900">
                  Edit User
                </h3>
                <div className="mt-2">
                  <form onSubmit={onSubmit}>
                    <div className="mb-4">
                      <label className="text-sm font-bold text-gray-600 block">
                        Username
                      </label>
                      <div className="w-full p-2 border rounded mt-1">
                        {userName}
                      </div>
                    </div>
                    <div className="mb-4">
                      <label className="text-sm font-bold text-gray-600 block">
                        Group
                      </label>
                      <select
                        className="w-full p-2 border rounded mt-1"
                        onChange={(e) => setSelectedGroup(e.target.value)}>
                        <option value={userData.group.id}>
                          {userData.group.name}
                        </option>
                        {groupList.map((group) => (
                          <option value={group.id} key={group.id}>
                            {group.name}
                          </option>
                        ))}
                      </select>
                    </div>
                    <button
                      type="submit"
                      className="mt-3 w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                      Save Changes
                    </button>
                  </form>
                </div>
              </div>
            </div>
          </div>
          <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
            <button
              type="button"
              className="mt-3 w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
              onClick={userToEdit.onClose}>
              Close
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EditUserPopup;
