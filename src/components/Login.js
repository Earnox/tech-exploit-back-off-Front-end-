import React, { useState, useEffect } from 'react';
import jwtDecode from 'jwt-decode';
// import { API_BASE_URL } from '../apiConfig';
// import axios from 'axios';
import { validateEmail } from '../utils/validators';

import { useNavigate } from 'react-router-dom';
import Network from '../utils/Network';

function Login() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState(null);
  const [errorMsg, setErrorMsg] = useState(null);
  const [sessionLoading, setSessionLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const token = localStorage.getItem('jwt');
    // au chargement de ma page
    // verification de la session
    // si session (user a un jwt) alors je redirige vers /app
    if (token) {
      console.log(token);
      const user = jwtDecode(token);
      // Mise à jour du contexte utilisateur
      // setUserContext(user);
      console.log('Login:useEffect:user:', user);
      // Redirection
      // navigate('/app');
    }
    setSessionLoading(false);
  }, []);

  function handleEmailChange(e) {
    setEmail(e.target.value);
  }

  function handlePasswordChange(e) {
    setPassword(e.target.value);
  }

  function validateInputs() {
    if (!email) {
      setError('Email is required');
      return false;
    }

    if (!validateEmail(email)) {
      setError('Email is invalid');
      return false;
    }

    if (!password) {
      setError('Password is required');
      return false;
    }

    setError(null);
    return true;
  }

  // API call
  // voir pour juste un fetch
  async function loginUser(email, password) {
    const API = new Network();

    try {
      const response = await API.post('/login', { email, password });
      if (response.data.jwt) {
        console.log(response.data);
        // localStorage.setItem('email', response.data.user.email);
        localStorage.setItem('jwt', response.data.jwt);
        // localStorage.setItem('id', response.data.user.id);
        // localStorage.setItem('group', response.data.user.group);
        // localStorage.setItem('name', response.data.user.name);

        navigate('/app');
      }

      return response.data;
    } catch (error) {
      if (error.response) {
        setErrorMsg(error.response.data.message);
        // La requête a été faite et le serveur a répondu avec un status code
        // qui est en dehors de la plage 2xx
        throw new Error(error.response.data.message);
      } else {
        // Une erreur est survenue en configurant la requête
        throw new Error('Error setting up request');
      }
    }
  }

  // Handle submit
  async function handleSubmit(e) {
    e.preventDefault();

    const isValid = validateInputs();
    if (!isValid) return;

    try {
      // Call API
      const user = await loginUser(email, password);

      // Successful login

      // props.onLogin(user);
    } catch (err) {
      // Error from API
      setError(err.message);
    }
  }
  return (
    <>
      {sessionLoading ? (
        <p>Chargement...</p>
      ) : (
        <form onSubmit={handleSubmit}>
          <input type="email" value={email} onChange={handleEmailChange} />
          <input
            type="password"
            value={password}
            onChange={handlePasswordChange}
          />
          <button type="submit">Login</button>
          {error && <p>{error}</p>}
        </form>
      )}
    </>
  );
}

export default Login;
