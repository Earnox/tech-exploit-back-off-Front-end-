import { useEffect, createContext, ReactNode, useState, } from "react";
import jwtDecode from "jwt-decode";


export interface UserContextProps {
  id: string;
  email: string;
  name: string;
  group: string;
  updateUserContext: (newValues: Partial<UserContextProps>) => void;
}

export const UserContext = createContext<UserContextProps>({
  id: '',
  email: '',
  name: '',
  group: '',
  updateUserContext: () => {},
});

interface UserProviderProps {
  children: ReactNode;
}

export function UserProvider({ children }: UserProviderProps) {
  const [id, setId] = useState<string>('');
  const [email, setEmail] = useState<string>('');
  const [name, setName] = useState<string>('');
  const [group, setGroup] = useState<string>('');

  useEffect(() => {
    // c'est ici que je vais fetch mon token
    const token = localStorage.getItem('jwt') as string;
    const hasToken = token && token !== 'undefined';
    if(hasToken) {
      // Sert Ã  reprendre le type UserContextProps tout en retirant une prop inutile
      const user = jwtDecode(token) as Omit<UserContextProps, 'updateUserContext'>;
      if (user) {
        setId(user.id);
        setEmail(user.email);
        setName(user.name);
        setGroup(user.group);
      }
    }
  }, []);

  const updateUserContext = (newValues: Partial<UserContextProps>) => {
    console.log('update inside context triggered:newValues:', newValues);
    if (newValues.id) setId(newValues.id);
    if (newValues.email) setEmail(newValues.email);
    if (newValues.name) setName(newValues.name);
    if (newValues.group) setGroup(newValues.group);
  };

  const userContextValues: UserContextProps = {
    id,
    email,
    name,
    group,
    updateUserContext,
  };

  return (
    <UserContext.Provider value={userContextValues}>
      {children}
    </UserContext.Provider>
  );
};
