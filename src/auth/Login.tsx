import React, { useState, useEffect, useContext, } from 'react';
import jwtDecode from 'jwt-decode';
import { useNavigate } from 'react-router-dom';
import Network from '../shared/Network';
import validateEmail from '../shared/validators';
import { DecodedUser, ApiResponse } from '../../type';
import { UserContext, UserContextProps } from './userContext';
// Define a specific interface for the data field in the API response

// const ErrorMessage: React.FC<{ message: string }> = ({ message }) => {
//   return (
//     <div className="bg-red-500 text-white py-2 px-4 rounded">{message}</div>
//   );
// };
const Login: React.FC = () => {
  const [email, setEmail] = useState<string>('');
  const [password, setPassword] = useState<string>('');
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();

  const { updateUserContext } = useContext(UserContext);
  
  useEffect(() => {
    const jwtToken = localStorage.getItem('jwt') as string;
    const hasToken = jwtToken && jwtToken !== 'undefined';
    if (hasToken) {
      const user: DecodedUser = jwtDecode(jwtToken);
      if (user) navigate('/app');
    }
  }, [navigate]);

  async function loginUser(email: string, password: string): Promise<any> {
    const API = new Network();
    try {
      const response: ApiResponse = await API.post('/login', {
        email,
        password,
      });

      if (response?.data?.code === 200) {
        localStorage.setItem('jwt', response.data.jwt);
        const user = jwtDecode(response.data.jwt) as Omit<UserContextProps, 'updateUserContext'>;
        updateUserContext({
          id: user.id,
          email: user.email,
          name: user.name,
          group: user.group,
        });
        navigate('/app');
      } else {
        alert('Une erreur est survenue lors de la connexion.');
      }
    } catch (error: any) {
      if (error.response) {
        setError(error.response.data.message);
      } else {
        setError('Error setting up request');
      }
    }
  }
  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault();

    if (validateInputs()) {
      loginUser(email, password);
    }
  }

  function validateInputs() {
    if (!email || !validateEmail(email)) {
      setError('Invalid email');
      return false;
    }

    if (!password) {
      setError('Password is required');
      return false;
    }

    setError(null);
    return true;
  }

  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold mb-4">Login</h1>
      <form onSubmit={handleSubmit} className="space-y-4">
        <input
          className="text-xl p-2 border rounded w-full"
          type="email"
          value={email}
          placeholder="Email"
          onChange={(e) => setEmail(e.target.value)}
        />
        <input
          className="text-xl p-2 border rounded w-full"
          type="password"
          value={password}
          placeholder="Password"
          onChange={(e) => setPassword(e.target.value)}
        />
        <button type="submit" className="bg-blue-500 p-2 rounded text-white">
          Login
        </button>
        {error && <p className="mt-4 text-red-500">{error}</p>}
      </form>
    </div>
  );
};

export default Login;
