import axios from 'axios';

class Network {
  constructor() {
    this.baseURL = 'http://localhost:3003';
    this.headers = {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${localStorage.getItem('jwt')}`,
    };
  }

  async get(uri) {
    try {
      const response = await axios.get(`${this.baseURL}${uri}`, {
        headers: this.headers,
      });
      return this.response(200, response.data, 'GET OK', null);
    } catch (error) {
      return this.response(500, null, null, JSON.stringify(error));
    }
  }

  async post(uri, body) {
    try {
      const response = await axios.post(`${this.baseURL}${uri}`, body, {
        headers: this.headers,
      });
      return this.response(200, response.data, 'GET OK', null);
    } catch (error) {
      return this.response(500, null, null, JSON.stringify(error));
    }
  }

  // async delete(endpoint, body) {
  //   const token = localStorage.getItem('jwt');
  //   try {
  //     const response = await fetch(`${this.baseURL}${endpoint}`, {
  //       method: 'DELETE',
  //       headers: {
  //         'Content-Type': 'application/json',
  //         Authorization: `Bearer ${token}`,
  //       },
  //       body: JSON.stringify(body),
  //     });
  //     return this.response(200, response.data, 'GET OK', null);
  //   } catch (error) {
  //     console.error(`Error making DELETE request to ${endpoint}:`, error);
  //     throw error;
  //   }
  // }
  async delete(url, body) {
    try {
      const response = await axios.delete(`${this.baseURL}${url}`, {
        data: body,
        headers: this.headers,
      });
      return this.response(200, response.data, 'DELETE OK', null);
    } catch (error) {
      console.error(`Error making DELETE request to ${url}:`, error);
      throw error;
    }
  }

  async updateUserProfile(userId, name, newPassword) {
    const endpoint = `/users/user?id=${userId}`;
    try {
      const response = await axios.patch(
        `${this.baseURL}${endpoint}`,
        {
          name: name,
          password: newPassword,
        },
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('jwt')}`,
            'Content-Type': 'application/json',
          },
        }
      );

      return response.data;
    } catch (error) {
      console.error('Error updating user profile:', error);
      throw error;
    }
  }

  response(code = null, data = null, message = null, error = null) {
    return {
      code: code || 500,
      message: message || 'Internal Server Error',
      data: data || {},
      error:
        code === 200
          ? null
          : error ||
            'An error occured with an exception within the Network class.',
    };
  }
}

export default Network;
