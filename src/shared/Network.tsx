import axios from 'axios';
import config from '../config';

import { ApiResponse, NetworkConfig } from '../types';
class Network implements NetworkConfig {
  baseURL: string;
  headers: {
    'Content-Type': string;
    Authorization: string;
  };

  constructor() {
    this.baseURL = config.API_URL || 'http://localhost:3005';
    this.headers = {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${localStorage.getItem('jwt')}`,
    };
  }
  
  async getAllUsers(): Promise<ApiResponse> {
    return this.get('/users');
  }

  async getUserById(id: string): Promise<ApiResponse> {
    return this.get(`/users/user?id=${id}`);
  }

  async deleteUser(id: string, body: any): Promise<ApiResponse> {
    return this.delete(`/users/user?id=${id}`, body);
  }

  async get(uri: string): Promise<ApiResponse> {
    try {
      const response = await axios.get(`${this.baseURL}${uri}`, {
        headers: this.headers,
      });
      return this.response(200, response.data, 'GET OK');
    } catch (error) {
      return this.response(500, null, '{}', JSON.stringify(error));
    }
  }

  async post(uri: string, body: any): Promise<ApiResponse> {
    try {
      const response = await axios.post(`${this.baseURL}${uri}`, body, {
        headers: this.headers,
      });
      return this.response(response?.data?.code || 200, response.data, 'GET OK');
    } catch (error) {
      return this.response(500, null, '{}', JSON.stringify(error));
    }
  }

  async delete(uri: string, body: any): Promise<ApiResponse> {
    try {
      const response = await axios.delete(`${this.baseURL}${uri}`, {
        data: body,
        headers: this.headers,
      });
      return this.response(200, response.data, 'GET OK');
    } catch (error) {
      return this.response(500, null, '{}', JSON.stringify(error));
    }
  }

  async updateUserProfile(
    userId: string,
    currentPassword: string,
    name?: string,
    newPassword?: string
  ): Promise<any> {
    // Le type de retour peut être plus spécifique selon votre API
    const endpoint = `/users/user?id=${userId}`;
    try {
      const response = await axios.patch(
        `${this.baseURL}${endpoint}`,
        {
          name: name,
          newPassword: newPassword,
          currentPassword: currentPassword,
        },
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('jwt')}`,
            'Content-Type': 'application/json',
          },
        }
      );
      return this.response(200, response.data, 'GET OK');
    } catch (error) {
      console.error('Error updating user profile:', error);
      throw error; // Ici, nous lançons l'erreur pour qu'elle puisse être gérée en amont
    }
  }
  async updateUserGroup(userId: string, group: string): Promise<any> {
    // fait un apppel a l'api pour patch le groupe d'un user
    const endpoint = `/users/group`;
    console.log('endpoint', `${this.baseURL}${endpoint}`);
    try {
      const response = await axios.patch(
        `${this.baseURL}${endpoint}`,
        {
          id: userId,
          groupId: group,
        },
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('jwt')}`,
            'Content-Type': 'application/json',
          },
        }
      );
      return this.response(200, response.data, 'GET OK');
    } catch (error) {
      console.error('Error updating user group:', error);
    }
  }

  response(
    code: number,
    data?: any,
    message?: string,
    error?: string
  ): ApiResponse {
    return {
      code: code || 500,
      message: message || 'Internal Server Error',
      data: data || {},
      error: code === 200 ? null : error || 'An error occurred...',
    };
  }
}
export default Network;
