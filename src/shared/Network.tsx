import axios from 'axios';
// good

import { ApiResponse, NetworkConfig } from '../models/network/NetworkModel';
// class Network {
//   constructor() {
//     this.baseURL = 'http://localhost:3003';
//     this.headers = {
//       'Content-Type': 'application/json',
//       Authorization: `Bearer ${localStorage.getItem('jwt')}`,
//     };
//   }

//   async get(uri) {
//     try {
//       const response = await axios.get(`${this.baseURL}${uri}`, {
//         headers: this.headers,
//       });
//       return this.response(200, response.data, 'GET OK', null);
//     } catch (error) {
//       return this.response(500, null, null, JSON.stringify(error));
//     }
//   }

//   async post(uri, body) {
//     try {
//       const response = await axios.post(`${this.baseURL}${uri}`, body, {
//         headers: this.headers,
//       });
//       return this.response(200, response.data, 'GET OK', null);
//     } catch (error) {
//       return this.response(500, null, null, JSON.stringify(error));
//     }
//   }
//   async delete(url, body) {
//     try {
//       const response = await axios.delete(`${this.baseURL}${url}`, {
//         data: body,
//         headers: this.headers,
//       });
//       console.log('response', response);
//       return this.response(200, response.data, 'DELETE OK', null);
//     } catch (error) {
//       console.error(`Error making DELETE request to ${url}:`, error);
//       throw error;
//     }
//   }

//   async updateUserProfile(userId, name, newPassword) {
//     const endpoint = `/users/user?id=${userId}`;
//     try {
//       const response = await axios.patch(
//         `${this.baseURL}${endpoint}`,
//         {
//           name: name,
//           password: newPassword,
//         },
//         {
//           headers: {
//             Authorization: `Bearer ${localStorage.getItem('jwt')}`,
//             'Content-Type': 'application/json',
//           },
//         }
//       );

//       return response.data;
//     } catch (error) {
//       console.error('Error updating user profile:', error);
//       throw error;
//     }
//   }

//   response(code = null, data = null, message = null, error = null) {
//     return {
//       code: code || 500,
//       message: message || 'Internal Server Error',
//       data: data || {},
//       error:
//         code === 200
//           ? null
//           : error ||
//             'An error occured with an exception within the Network class.',
//     };
//   }
// }
class Network implements NetworkConfig {
  static post(
    arg0: string,
    arg1: {
      name: string;
      //         headers: this.headers,
      //       });
      //       console.log('response', response);
      //       return this.response(200, response.data, 'DELETE OK', null);
      //     } catch (error) {
      //       console.error(`Error making DELETE request to ${url}:`, error);
      //       throw error;
      //     }
      //   }
      //   async updateUserProfile(userId, name, newPassword) {
      //     const endpoint = `/users/user?id=${userId}`;
      //     try {
      //       const response = await axios.patch(
      //         `${this.baseURL}${endpoint}`,
      //         {
      //           name: name,
      //           password: newPassword,
      //         },
      //         {
      //           headers: {
      //             Authorization: `Bearer ${localStorage.getItem('jwt')}`,
      //             'Content-Type': 'application/json',
      //           },
      //         }
      //       );
      //       return response.data;
      //     } catch (error) {
      //       console.error('Error updating user profile:', error);
      //       throw error;
      //     }
      //   }
      //   response(code = null, data = null, message = null, error = null) {
      //     return {
      //       code: code || 500,
      //       message: message || 'Internal Server Error',
      //       data: data || {},
      //       error:
      //         code === 200
      //           ? null
      //           : error ||
      //             'An error occured with an exception within the Network class.',
      //     };
      //   }
      // }
      password: string;
    }
  ) {
    throw new Error('Method not implemented.');
  }
  baseURL: string;
  headers: {
    'Content-Type': string;
    Authorization: string;
  };

  constructor() {
    this.baseURL = 'http://localhost:3003';
    this.headers = {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${localStorage.getItem('jwt')}`,
    };
  }

  async get(uri: string): Promise<ApiResponse> {
    try {
      const response = await axios.get(`${this.baseURL}${uri}`, {
        headers: this.headers,
      });
      return this.response(200, response.data, 'GET OK');
    } catch (error) {
      return this.response(500, null, '{}', JSON.stringify(error));
    }
  }

  async post(uri: string, body: any): Promise<ApiResponse> {
    // "body: any" peut être typé plus précisément si nécessaire
    try {
      const response = await axios.post(`${this.baseURL}${uri}`, body, {
        headers: this.headers,
      });
      return this.response(200, response.data, 'GET OK');
    } catch (error) {
      return this.response(500, null, '{}', JSON.stringify(error));
    }
  }

  // ... (continuer avec les autres méthodes en suivant la même logique)

  async delete(uri: string, body: any): Promise<ApiResponse> {
    try {
      const response = await axios.delete(`${this.baseURL}${uri}`, {
        data: body,
        headers: this.headers,
      });
      return this.response(200, response.data, 'GET OK');
    } catch (error) {
      return this.response(500, null, '{}', JSON.stringify(error));
    }
  }

  async updateUserProfile(
    userId: string,
    name: string,
    newPassword: string
  ): Promise<any> {
    // Le type de retour peut être plus spécifique selon votre API
    const endpoint = `/users/user?id=${userId}`;
    try {
      const response = await axios.patch(
        `${this.baseURL}${endpoint}`,
        {
          name: name,
          password: newPassword,
        },
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('jwt')}`,
            'Content-Type': 'application/json',
          },
        }
      );
      return response.data;
    } catch (error) {
      console.error('Error updating user profile:', error);
      throw error; // Ici, nous lançons l'erreur pour qu'elle puisse être gérée en amont
    }
  }

  response(
    code: number,
    data?: any,
    message?: string,
    error?: string
  ): ApiResponse {
    return {
      code: code || 500,
      message: message || 'Internal Server Error',
      data: data || {},
      error:
        code === 200
          ? null
          : error ||
            'An error occured with an exception within the Network class.',
    };
  }
}
export default Network;
