// Dans le Login stocker dans le contexte le payload du jwt
// Dans pog ma hom récupérer le user depuis le contexte
// recuperer son groupId
// filtrer le tableau de resultat en f(x) de l'id du groupe de l'utilisateur
import { useNavigate } from 'react-router-dom';
import Network from '../shared/Network';
import React, { useState, useEffect } from 'react';
import jwtDecode from 'jwt-decode';
import { User } from '../type';

function Home() {
  function isUser(obj: any): obj is User {
    return (
      obj &&
      typeof obj.id === 'string' &&
      typeof obj.name === 'string' &&
      typeof obj.email === 'string' &&
      typeof obj.group === 'object' &&
      typeof obj.groupId === 'string' &&
      typeof obj.group.name === 'string'
    );
  }

  const [error, setError] = useState(null);
  const [user, setUser] = useState<User | null>(null);
  const navigate = useNavigate();
  const API = new Network();

  useEffect(() => {
    if (!localStorage.getItem('jwt')) navigate('/');

    const token = localStorage.getItem('jwt');
    const decodedToken: Record<string, any> = token ? jwtDecode(token) : {};
    const id = decodedToken && 'id' in decodedToken ? decodedToken.id : null;

    async function getUser(id: string) {
      try {
        const data = await API.get(`/users/user?id=${id}`);
        if (isUser(data.data)) {
          setUser(data.data);
        } else {
          console.error('Unexpected response format:', data.data);
        }
      } catch (e) {
        console.log(e);
      }
    }

    getUser(id);
  }, [navigate]);

  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold mb-4">Welcome, {user?.name}</h1>
      <p className="mb-2">Email: {user?.email}</p>
      <p>Group: {user?.group?.name}</p>
    </div>
  );
}

export default Home;
