import { ReactNode } from 'react';
export interface DecodedToken {
  id: string;
  name: string;
  [key: string]: any; // Pour couvrir d'autres propriétés potentielles du token
}
export interface EditUserPopupProps {
  isOpen: any;
  userToEdit: any;
  onClose: () => void;
}
export interface ProtectedElementProps {
  children: ReactElement | null;
}

export interface GroupCreationPopupProps {
  onGroupCreated?: (group: Group) => void; // Un callback lorsqu'un groupe est créé.
  // Ajoutez d'autres props si nécessaire.
}

export interface Group {
  // Les propriétés de base d'un groupe. À ajuster selon vos besoins.
  id: string;
  name: string;
  permissions: string[]; // ou peut-être un tableau d'objets si vous avez un modèle de permission.
}

export interface GroupCreationPopupState {
  // Les états de base pour le composant. À ajuster selon vos besoins.
  groupName: string;
  permissions: string[];
  // Ajoutez d'autres états si nécessaire.
}

// export interface Group {
//     id: number;
//     name: string;
//     // TODO: Add other relevant attributes of the group
// }

export interface JWTHeader {
  alg: string;
  typ: string;
}

export interface JWTPayload {
  sub: string;
  name: string;
  iat: number;
  // TODO: Add other potential attributes of the JWT payload
}

// This is the decoded representation of a JWT. Actual JWTs are encoded strings.
export interface JWT {
  header: JWTHeader;
  payload: JWTPayload;
}

// JWT decoded user type
export interface DecodedUser {
  id: number;
  email: string;
  // Add other potential fields from the decoded JWT here
}

// API response type for the login
export interface User {
  id: string;
  name: string;
  email: string;
  group?: {
    id: string;
    name: string;
  };
  groupId?: string;
  matricule: string;
  // ... (autres propriétés si elles existent)
}
export interface Credentials {
  email: string;
  password: string;
}

export interface AuthResponse {
  token: string;
  user: User;
}
export interface LoginResponse {
  data: any;
  code: number;
  user: User;
  jwt: string;
}

// Réponse type
export interface ApiResponse {
  code: number;
  data?: string | Record<string, any>; // Accepte une chaîne ou un objet
  message: string;
  error: string | null;
}

// interface ApiResponse {
//   code: number;
//   data?: any;
//   message: string;
//   error: string | null;
// }
// Configuration de base de la classe Network
export interface NetworkConfig {
  baseURL: string;
  headers: {
    'Content-Type': string;
    Authorization: string | null;
  };
}

export interface Permission {
  id: number;
  name: string;
  // TODO: Add other relevant attributes of the permission
}

export interface ProtectElementProps {
  children: ReactNode;
}
export interface SearchTermProps {
  searchTermValue: string;
  setSearchTerm: ChangeEventHandler<HTMLInputElement>;
}

interface ButtonProps {
  text: string;
  type?: 'button' | 'submit' | 'reset';
  onClick?: () => void;
  className?: string;
  disabled?: boolean;
  icons?: string;
}
